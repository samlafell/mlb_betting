# Docker Compose v2 syntax - version attribute is obsolete

services:
  # Redis - Feature cache and online store (512MB limit)
  redis:
    image: redis:7-alpine
    container_name: mlb_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - mlb_network

  # MLflow - Model registry and experiment tracking
  mlflow:
    image: python:3.11-slim
    container_name: mlb_mlflow
    restart: unless-stopped
    ports:
      - "5001:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_HOST=0.0.0.0
      - MLFLOW_PORT=5000
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
      - ./logs/mlflow:/mlflow/logs
    command: |
      sh -c "
        pip install mlflow[extras] psycopg2-binary && 
        mlflow server \
          --backend-store-uri $${MLFLOW_BACKEND_STORE_URI} \
          --default-artifact-root $${MLFLOW_DEFAULT_ARTIFACT_ROOT} \
          --host $${MLFLOW_HOST} \
          --port $${MLFLOW_PORT} \
          --serve-artifacts
      "
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/health').read()"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - mlb_network

  # FastAPI - ML Prediction Service with improved configuration
  # Also accessible as 'ml-api' for convenience
  fastapi:
    build:
      context: .
      dockerfile: docker/fastapi/Dockerfile
    container_name: mlb_fastapi
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      # Application configuration
      - LOG_LEVEL=INFO
      - MAX_WORKERS=1
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # UV virtual environment configuration
      - UV_PROJECT_ENVIRONMENT=/app/.venv
    volumes:
      - ./src:/app/src:ro
      - ./models:/app/models
      - ./logs/fastapi:/app/logs
      - ./config.toml:/app/config.toml:ro
    # Use the Dockerfile's CMD instead of overriding
    # command: from Dockerfile handles uv run properly
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    depends_on:
      redis:
        condition: service_healthy
      mlflow:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 90s
    networks:
      - mlb_network

  # Nginx - Reverse proxy and API gateway
  nginx:
    image: nginx:alpine
    container_name: mlb_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    depends_on:
      fastapi:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mlb_network

  # Feast - Feature store (optional, can be added later)
  # feast:
  #   build:
  #     context: .
  #     dockerfile: docker/feast/Dockerfile
  #   container_name: mlb_feast
  #   restart: unless-stopped
  #   environment:
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB}
  #     - REDIS_URL=redis://redis:6379/1
  #   volumes:
  #     - ./feast:/feast
  #     - ./logs/feast:/logs
  #   depends_on:
  #     - redis
  #   networks:
  #     - mlb_network

volumes:
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local

networks:
  mlb_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16