# üîê MLB Betting System Environment Configuration
# üö® SECURITY CRITICAL: Copy this file to .env and update with your actual values  
# ‚ö†Ô∏è  NEVER commit .env files to version control

# =========================================
# üö® CRITICAL SECURITY NOTICE
# =========================================
# Generate strong passwords using:
# - openssl rand -base64 32
# - head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32  
# - Use a password manager for production

# =========================================
# ENVIRONMENT CONFIGURATION
# =========================================
ENVIRONMENT=development                     # Options: development, staging, production
DEBUG=false                                # Enable debug mode (development only)
LOG_LEVEL=INFO                             # Options: DEBUG, INFO, WARNING, ERROR

# =========================================
# DATABASE CONFIGURATION
# =========================================
# PostgreSQL Configuration (Primary Database)
POSTGRES_HOST=localhost                    # Use host.docker.internal for Docker
POSTGRES_PORT=5432                         # Standard PostgreSQL port (5433 for Docker locally)
POSTGRES_DB=mlb_betting                    # Database name
POSTGRES_USER=your_username_here           # Database username
POSTGRES_PASSWORD=CHANGE_THIS_SECURE_PASSWORD_IMMEDIATELY  # üö® MUST CHANGE

# Alternative database URL format (used by some services)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Database Pool Configuration (Production/Staging)
DATABASE_SSL_MODE=prefer                   # Options: require, prefer, disable
DATABASE_MIN_CONNECTIONS=3                 # Minimum pool connections
DATABASE_MAX_CONNECTIONS=15                # Maximum pool connections

# =========================================
# REDIS CONFIGURATION  
# =========================================
REDIS_HOST=localhost                       # Use 'redis' for Docker container name
REDIS_PORT=6379                           # Standard Redis port
REDIS_DB=0                                # Redis database number
REDIS_PASSWORD=                           # Redis password (if required)
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}  # Full Redis URL
REDIS_SSL=false                           # Enable SSL for production

# =========================================
# API CONFIGURATION
# =========================================
API_HOST=0.0.0.0                          # API bind address
API_PORT=8000                             # API port
API_WORKERS=2                             # Number of API workers (adjust for environment)
API_SECRET_KEY=your_api_secret_key_here_generate_secure_random_string  # üö® MUST CHANGE

# JWT Configuration
JWT_SECRET_KEY=your_jwt_secret_key_here_generate_secure_random_string   # üö® MUST CHANGE  
JWT_ALGORITHM=HS256                       # JWT signing algorithm
JWT_EXPIRE_MINUTES=1440                   # JWT expiration (24 hours)

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080  # Allowed origins (update for production)

# =========================================
# MACHINE LEARNING CONFIGURATION
# =========================================
# MLflow Configuration
MLFLOW_TRACKING_URI=http://localhost:5000  # MLflow tracking server URL
MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
MLFLOW_DEFAULT_ARTIFACT_ROOT=./mlruns     # Artifact storage location
MLFLOW_REGISTRY_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Model Configuration  
MODEL_SERVING_ENABLED=true                # Enable model serving API
DEFAULT_MODEL_NAME=lightgbm_v1            # Default model for predictions
MODEL_CONFIDENCE_THRESHOLD=0.65           # Minimum confidence for predictions
ENABLE_MODEL_EXPLANATIONS=false           # Enable SHAP explanations (resource intensive)

# Model Caching
MODEL_CACHE_TTL_SECONDS=3600              # Model cache TTL (1 hour)
FEATURE_CACHE_TTL_SECONDS=1800            # Feature cache TTL (30 minutes)
MAX_BATCH_SIZE=50                         # Maximum batch size for predictions

# =========================================
# RATE LIMITING & SECURITY
# =========================================
RATE_LIMIT_REQUESTS_PER_MINUTE=60         # General API rate limit
PREDICTION_RATE_LIMIT=10                  # ML prediction specific rate limit

# Security Headers (Production)
SECURITY_HEADERS_ENABLED=true             # Enable security headers
HSTS_MAX_AGE=31536000                     # HSTS max age (1 year for production)
CORS_MAX_AGE=3600                         # CORS preflight cache (1 hour)

# =========================================
# MONITORING & OBSERVABILITY
# =========================================
ENABLE_METRICS=true                       # Enable Prometheus metrics
METRICS_PORT=9090                         # Prometheus metrics port
PROMETHEUS_ENABLED=true                   # Enable Prometheus integration
HEALTH_CHECK_TIMEOUT=30                   # Health check timeout (seconds)

# =========================================
# PERFORMANCE CONFIGURATION
# =========================================
MAX_WORKERS=2                             # Maximum worker processes (adjust for environment)
WORKER_TIMEOUT=60                         # Worker timeout (seconds)
KEEPALIVE_TIMEOUT=30                      # Keep-alive timeout (seconds)

# =========================================
# ENVIRONMENT-SPECIFIC NOTES
# =========================================

# DEVELOPMENT:
# - Use localhost for database and Redis
# - Lower rate limits for testing
# - Debug logging enabled
# - Reduced worker counts

# STAGING:  
# - Use staging hostnames
# - Moderate rate limits
# - SSL preferred but not required
# - Moderate resource allocation

# PRODUCTION:
# - Use production hostnames with SSL
# - Strict rate limits and security
# - SSL required for all services
# - Maximum performance settings

# DOCKER/ML:
# - Use container names for service discovery
# - host.docker.internal for database access
# - Volume mounts for MLflow artifacts
# - Container-optimized networking

# =========================================
# OPTIONAL: External APIs (Future Use)
# =========================================
# ODDS_API_KEY=your_api_key_here
# EMAIL_FROM_ADDRESS=your_email@example.com
# NOTIFICATION_WEBHOOK_URL=https://hooks.slack.com/your/webhook/url